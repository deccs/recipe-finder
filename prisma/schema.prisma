// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recipes      Recipe[]
  favorites    Favorite[]
  shoppingLists ShoppingList[]
  timers       Timer[]

  @@map("users")
}

model Recipe {
  id          String      @id @default(cuid())
  title       String
  description String
  instructions String
  imageUrl    String?
  prepTime    Int         // in minutes
  cookTime    Int         // in minutes
  servings    Int
  difficulty  Difficulty  @default(MEDIUM)
  category    String
  tags        String   // Will store comma-separated tags for SQLite compatibility
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  author    User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  ingredients Ingredient[]
  favorites  Favorite[]

  @@map("recipes")
}

model Ingredient {
  id       String @id @default(cuid())
  name     String
  amount   String
  unit     String
  recipeId String

  // Relations
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@map("ingredients")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  recipeId  String
  createdAt DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([userId, recipeId])
  @@map("favorites")
}

model ShoppingList {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  items ShoppingListItem[]

  @@map("shopping_lists")
}

model ShoppingListItem {
  id           String  @id @default(cuid())
  name         String
  amount       String
  unit         String
  completed    Boolean @default(false)
  shoppingListId String

  // Relations
  shoppingList ShoppingList @relation(fields: [shoppingListId], references: [id], onDelete: Cascade)

  @@map("shopping_list_items")
}

model Timer {
  id        String   @id @default(cuid())
  name      String
  duration  Int      // in seconds
  endTime   DateTime
  userId    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("timers")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}